import numpy as np

# Define the lengths of links
l1 = 1
l2 = 1
l3 = 1
l4 = 1

# Define the joint angles (thetas)
theta1 = np.pi / 4
theta2 = np.pi / 3
theta3 = np.pi / 6
theta4 = np.pi / 2

# Compute the transformation matrices for each link
T01 = np.array([[np.cos(theta1), -np.sin(theta1), 0, 0],
                [np.sin(theta1), np.cos(theta1), 0, 0],
                [0, 0, 1, 0],
                [0, 0, 0, 1]])

T12 = np.array([[np.cos(theta2), -np.sin(theta2), 0, l1],
                [0, 0, -1, 0],
                [np.sin(theta2), np.cos(theta2), 0, 0],
                [0, 0, 0, 1]])

T23 = np.array([[np.cos(theta3), -np.sin(theta3), 0, l2],
                [0, 0, 1, 0],
                [-np.sin(theta3), -np.cos(theta3), 0, 0],
                [0, 0, 0, 1]])

T34 = np.array([[np.cos(theta4), -np.sin(theta4), 0, l3],
                [0, 0, -1, 0],
                [np.sin(theta4), np.cos(theta4), 0, 0],
                [0, 0, 0, 1]])

# Compute the total transformation matrix from base to end-effector
T04 = np.dot(np.dot(np.dot(T01, T12), T23), T34)

# Compute the rotational part of the Jacobian (orientation part)
Jr = T04[:3, :3]

# Compute the linear part of the Jacobian (position part)
Jp = np.array([[0, -l1*np.sin(theta2) - l2*np.sin(theta2+theta3) - l3*np.sin(theta2+theta3+theta4), -l2*np.sin(theta2+theta3) - l3*np.sin(theta2+theta3+theta4), -l3*np.sin(theta2+theta3+theta4)],
               [0, l1*np.cos(theta2) + l2*np.cos(theta2+theta3) + l3*np.cos(theta2+theta3+theta4), l2*np.cos(theta2+theta3) + l3*np.cos(theta2+theta3+theta4), l3*np.cos(theta2+theta3+theta4)],
               [1, 0, 0, 0]])

# Combine rotational and linear parts to get the geometric Jacobian
Jg = np.vstack((Jp, Jr))

print("Geometric Jacobian:")
print(Jg)
