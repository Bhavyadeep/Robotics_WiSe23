class CubicSpline:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.n = len(x)  # Number of data points
        self.a, self.b, self.c, self.d = self._compute_cubic_spline()

    def _compute_cubic_spline(self):
        h = [self.x[i + 1] - self.x[i] for i in range(self.n - 1)]
        alpha = [(3 / h[i]) * (self.y[i + 1] - self.y[i]) - (3 / h[i - 1]) * (self.y[i] - self.y[i - 1])
                 for i in range(1, self.n - 1)]
        l = [1] * self.n
        mu = [0] * self.n
        z = [0] * self.n

        for i in range(1, self.n - 1):
            l[i] = 2 * (self.x[i + 1] - self.x[i - 1]) - h[i - 1] * mu[i - 1]
            mu[i] = h[i] / l[i]
            z[i] = (alpha[i - 1] - h[i - 1] * z[i - 1]) / l[i]

        l[-1] = 1
        z[-1] = 0
        c = [0] * self.n
        b = [0] * self.n
        d = [0] * self.n

        for j in range(self.n - 2, -1, -1):
            c[j] = z[j] - mu[j] * c[j + 1]
            b[j] = (self.y[j + 1] - self.y[j]) / h[j] - h[j] * (c[j + 1] + 2 * c[j]) / 3
            d[j] = (c[j + 1] - c[j]) / (3 * h[j])

        return self.y[:-1], b, c[:-1], d

    def interpolate(self, xi):
        for i in range(self.n - 1):
            if self.x[i] <= xi <= self.x[i + 1]:
                dx = xi - self.x[i]
                return self.a[i] + self.b[i] * dx + self.c[i] * dx ** 2 + self.d[i] * dx ** 3

        raise ValueError("Interpolation outside the range of data points")


# Example usage:
if __name__ == "__main__":
    # Define the data points
    x_data = [1, 2, 2.5, 4]
    y_data = [45, 90, -45, 45]

    # Create a cubic spline interpolation
    spline = CubicSpline(x_data, y_data)

    # Interpolate at a new point
    xi = 2.7
    yi = spline.interpolate(xi)
    print(f"Interpolated value at {xi}: {yi}")
